angular.module('aipdatingApp', ['ngRoute']).config(function($routeProvider, $locationProvider) {
  $routeProvider.when('/', {

    templateUrl: '/profile/profile.view.html',
    controller: 'ProfileCtrl',
    controllerAs: 'vm',
    authorize: true
  }).when('/login', {
    templateUrl: '/auth/login/login.view.html',
    controller: 'LoginCtrl',
    controllerAs: 'vm',
  }).when('/register', {
    templateUrl: '/auth/register/register.view.html',
    controller: 'RegisterCtrl',
    controllerAs: 'vm',
  }).when('/profile', {
    templateUrl: '/profile/profile.view.html',
    controller: 'ProfileCtrl',
    controllerAs: 'vm',
    authorize: true
  }).when('/register-success', {
    templateUrl: '/auth/register/register.success.html',
    //controller: 'RegisterCtrl',
    //controllerAs: 'vm',
  }).when('/logout', {
    template: '',
    controller: 'logoutCtrl',
    controllerAs: 'vm'
  }).otherwise('/');


}).run(function($rootScope, $location) {
  console.log('run is called!!!');
  $rootScope.$on('$routeChangeStart', function(event, to, from) {
    console.log("start routeChangeStart");
/*
    if(to.adminAuth === true) {
      to.resolve = to.resolve || {};
      to.resolve.auth = function(authentication) {
        if(authentication.currentUser() != null) {
          if (authentication.currentUser().role === 'Admin')
            return true;
        }
        throw new AuthorizationError();
      }
    }
*/
    if(to.authorize === true) {
      to.resolve = to.resolve || {};
      to.resolve.auth = function(authentication) {
        if (authentication.currentUser()){
            console.log("User is authorized");
            return true;
        }

        throw new AuthorizationError();
      }
    }

  });

  $rootScope.$on('$routeChangeSuccess', function() {

  });

  $rootScope.$on('$routeChangeError', function(event, current, previous, error) {
      if (error instanceof AuthorizationError) {
        $location.path("login");
      }
  });

  function AuthorizationError(description) {
    this.message = 'Forbidden';
    this.description = description || 'User authentication required';
  }
  AuthorizationError.prototype = Object.create(Error.prototype);
  AuthorizationError.prototype.constructor = AuthorizationError;

  //AuthorizationErrorRole.prototype = Object.create(Error.prototype);
  //AuthorizationErrorRole.prototype.constructor = AuthorizationError;

});

//Angular Front-end script file

angular.module('aipdatingApp')
    .controller('ProfileCtrl', function($http, authentication) {

		// Profile holder
		var extended = {
		  nickname: "",
		  distance: "-",
		  match: "No",
		  _id: ""
		};

        var vm = this;
        vm.formProfile = [];
        vm.admin = false;
		vm.profileEval = [];

        if(authentication.currentUser().role === "Admin")
          vm.admin = true;
          vm.currentUser = authentication.currentUser().name;

        console.log("Role isssssss " + vm.admin);

        $http.get('/api/profile/', {
          headers: {
            Authorization: authentication.getToken()
          }
        }).then(function(res) {
            vm.profiles = res.data;
			vm.profileEval = [];
			for(i = 0; i < vm.profiles.length; i++)
			  vm.profileEval.push(extended);
        });

		vm.match = function() {
			vm.extendedProfiles.length = 0;

			for(i = 0; i < vm.profiles.length; i++) {
				console.log("ABID " + vm.profiles[i].nickname);
				extended.nickname = vm.profiles[i].nickname;
				extended._id = vm.profiles[i]._id;

				// get the distance from the maps web service
				extended.distance = i.toString();

				// evaluate the match
				extended.match = "Maybe";

				// add to the bound list data
				vm.profileEval.push(extended);
			}
		}

        vm.clear = function() {
            vm.formProfile = {};
        }

        //This function will handle both of ADD and EDIT operation after checking the current
        //existing ID
        vm.submit = function() {
            //Split between Add or Edit operation
            //Add new profile

            if(!vm.formProfile._id) {
                //Check "Male" radio button for default
                if(vm.formProfile.gender == null){
                    vm.formProfile.gender = "Male";
                }

                var newProfile = {
                    nickname: vm.formProfile.nickname,
                    age: vm.formProfile.age,
                    interest: vm.formProfile.interest,
                    suburb: vm.formProfile.suburb,
                    state: vm.formProfile.state,
                    gender: vm.formProfile.gender
                };
                //Local view update: push the new item into the local data first
                console.log("NEW profile is: ");
                console.log(newProfile);
                //optimistic adding
                vm.profiles.push(newProfile);
                //Database call: then call http.post to add into database
                $http.post('/api/profile/', newProfile).then(
                  function(res) {
                    vm.profiles[vm.profiles.length - 1]._id = res.data.profile._id;
                  },
                  function(res) {
                    //If fail to update, roll back
                    vm.profiles.pop();
                  });
            }
            else {
                //Edit existing profile
                //Backup before executing the operation
                var backup = vm.profiles;

                //Local view update: update the current local data with the new updated item
                vm.profiles = vm.profiles.map(function(profile) {
                    if(profile._id === vm.formProfile._id) {
                        return {
                          nickname: vm.formProfile.nickname,
                          age: vm.formProfile.age,
                          suburb: vm.formProfile.suburb,
                          state: vm.formProfile.state,
                          interest: vm.formProfile.interest,
                          gender: vm.formProfile.gender,
                          _id: vm.formProfile._id
                        };
                    }
                    return profile;
                });

                //Database call: call http.put to update into database
                $http.put('/api/profile/' + vm.formProfile._id, {
                  nickname: vm.formProfile.nickname,
                  age: vm.formProfile.age,
                  interest: vm.formProfile.interest,
                  suburb: vm.formProfile.suburb,
                  state: vm.formProfile.state,
                  gender: vm.formProfile.gender
                }).then(
                  function(res) {
                    //successful
                  },
                  function(res) {
                    //error
                    vm.profiles = backup;
                  }
                );
            }
            //Clear the form after finishing operation
            vm.clear();
            vm.isEdit = false;
        }

        //This function to delete the item in the database
        vm.delete = function(index) {
            //Backup before executing the operation
            var backup = vm.profiles;
            var deleteId = vm.profiles[index]._id;
            vm.profiles = vm.profiles.filter(function(profile, profileIndex) {
                return index !== profileIndex;
            });
            $http.delete('/api/profile/'+ deleteId).then(function(res) {
            }, function(res) {
                //If fail to update, roll back
                vm.profiles = backup;
            });
        }

        //This function is used to move the chosen item data into the form
        vm.edit = function(index) {
          console.log("vm edit is call");
            vm.isEdit = true;
            var editProfile = vm.profiles[index];
            vm.formProfile = {
                nickname: editProfile.nickname,
                age: editProfile.age,
                suburb: editProfile.suburb,
                state: editProfile.state,
                interest: editProfile.interest,
                gender: editProfile.gender,
                _id: editProfile._id
            }
        }

        vm.close = function() {
          vm.isEdit = false;
        }
    });

angular.module('aipdatingApp')
  .controller('LoginCtrl', function($location, authentication) {
    var vm = this;
    vm.formLogin = {};
/*
    vm.onSubmit = function () {
      console.log("Started login process...");
      authentication.login(vm.formLogin).error(function (err) {
        alert(err);
      }).then(function() {
        console.log("login success!")
        $location.path("profile");
      })
    }
*/
vm.login = function () {
  console.log("Started login process...");
  authentication.login(vm.formLogin).error(function (err) {
    alert(err);
  }).then(function() {
    console.log("login success! yay");
    console.log("user is just logged in: " + authentication.currentUser().name);
    $location.path('profile');
  })
}
  });

angular.module('aipdatingApp').controller('logoutCtrl', function($location,authentication) {
  console.log("Logging out user");
  authentication.logout();
  $location.path('profile');
});

angular.module('aipdatingApp')
  .controller('RegisterCtrl', function($location, authentication) {
    var vm = this;
    vm.registrationForm = {};

    vm.submit = function() {
      console.log("Register is calling ");

      authentication.register(vm.registrationForm).error(function (err) {
        alert(err);
      }).then(function() {
        console.log("registration success");
        console.log("New registered user is: " + authentication.currentUser().name);
        $location.path('register-success');
      });

      console.log("After, Register is calling " + authentication.getToken());
    }
  });

angular.module('aipdatingApp').service('authentication', function($http, $window, $timeout) {

  var user = null;

  function initState() {
    var token;
    var payload;

    token = getToken();

    user = null;
    if(token) {
      console.log("token is not null");
      payload = token.split('.')[1];
      payload = $window.atob(payload);
      payload = JSON.parse(payload);

      if (payload.exp > Date.now() / 1000) {
        user = {
          _id: payload._id,
          email: payload.email,
          name: payload.name,
          role: payload.role
        };
        console.log("you are currently logged in");
      };
    };

  };

  initState();

  function currentUser() {
    //console.log("currentUser email: " + user.email);
    return user;
  };

  function getToken() {
    return $window.localStorage['aip-token'];
  }

  function loggedIn(loggedInUser,token) {
    $window.localStorage['aip-token'] = token;
    user = {
      _id: loggedInUser._id,
      email: loggedInUser.email,
      name: loggedInUser.name,
      role: loggedInUser.role
    };
    initState();
  }

  function login(candidateUser) {
    return $http.post('/auth/login',candidateUser).success(function(res) {
      /*
      console.log(res.user);
      user = {
        _id: res.user._id,
        email: res.user.email,
        name: res.user.name,
        role: res.user.role
      };
      console.log("new user : " + user.email);
      */
      loggedIn(res.user, res.token);
    })
  }

  function register(user) {
    console.log("calling register");
    return $http.post('/auth/register',user).success(function(res) {
      console.log("register success");
      console.log("token is: " + res.token);
      loggedIn(res.user, res.token);
    })
  }

  function logout() {
    console.log("logging outttttttttt user");
    $window.localStorage['aip-token'] = "";
    initState();
  }

  return {
    currentUser: currentUser,
    getToken: getToken,
    login: login,
    register: register,
    logout: logout,
  };

});

//# sourceMappingURL=app.min.js.map
