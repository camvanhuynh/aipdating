angular.module('aipdatingApp', ['ngRoute']).config(["$routeProvider", "$locationProvider", function($routeProvider, $locationProvider) {
  $routeProvider.when('/', {

    templateUrl: '/profile/profile.view.html',
    controller: 'ProfileCtrl',
    controllerAs: 'vm',
    authorize: true
  }).when('/login', {
    templateUrl: '/auth/login/login.view.html',
    controller: 'LoginCtrl',
    controllerAs: 'vm',
  }).when('/register', {
    templateUrl: '/auth/register/register.view.html',
    controller: 'RegisterCtrl',
    controllerAs: 'vm',
  }).when('/profile', {
    templateUrl: '/profile/profile.view.html',
    controller: 'ProfileCtrl',
    controllerAs: 'vm',
    authorize: true
  }).when('/register-success', {
    templateUrl: '/auth/register/register.success.html',
    //controller: 'RegisterCtrl',
    //controllerAs: 'vm',
  }).when('/logout', {
    template: '',
    controller: 'logoutCtrl',
    controllerAs: 'vm'
  }).otherwise('/');


}]).run(["$rootScope", "$location", function($rootScope, $location) {
  console.log('run is called!!!');
  $rootScope.$on('$routeChangeStart', function(event, to, from) {
    console.log("start routeChangeStart");
/*
    if(to.adminAuth === true) {
      to.resolve = to.resolve || {};
      to.resolve.auth = function(authentication) {
        if(authentication.currentUser() != null) {
          if (authentication.currentUser().role === 'Admin')
            return true;
        }
        throw new AuthorizationError();
      }
    }
*/
    if(to.authorize === true) {
      to.resolve = to.resolve || {};
      to.resolve.auth = function(authentication) {
        if (authentication.currentUser()){
            console.log("User is authorized");
            return true;
        }

        throw new AuthorizationError();
      }
    }

  });

  $rootScope.$on('$routeChangeSuccess', function() {

  });

  $rootScope.$on('$routeChangeError', function(event, current, previous, error) {
      if (error instanceof AuthorizationError) {
        $location.path("login");
      }
  });

  function AuthorizationError(description) {
    this.message = 'Forbidden';
    this.description = description || 'User authentication required';
  }
  AuthorizationError.prototype = Object.create(Error.prototype);
  AuthorizationError.prototype.constructor = AuthorizationError;

  //AuthorizationErrorRole.prototype = Object.create(Error.prototype);
  //AuthorizationErrorRole.prototype.constructor = AuthorizationError;

}]);

//Angular Front-end script file

angular.module('aipdatingApp')
    .controller('ProfileCtrl', ["$http", "authentication", function($http, authentication) {
      var vm = this;

      vm.formProfile = {};
      vm.profileEval = [];
      vm.weather = "Unknown";
      vm.temperature = "Uknown";
      vm.admin = false;
    
      var extended = {
        nickname: "",
        distance: "-",
        match: "No",
        _id: ""
      };

      if(authentication.currentUser().role === "Admin")
         vm.admin = true;


      vm.currentUser = authentication.currentUser().name;

      console.log("Role isssssss " + vm.admin);

      $http.get('/api/profile/', {
        headers: {
          Authorization: authentication.getToken()
        }
      }).then(function(res) {
        vm.profiles = res.data;
        
        // initialise the default evaluation of matches
        vm.profileEval = [];
        for(i = 0; i < vm.profiles.length; i++)
          vm.profileEval.push(extended);
      });

      // get the current weather from the server
      $.getJSON('weather.json', {}, function(data) {
        console.log(data[0]["current"]);  // there's a nice array of info in here
        vm.weather = data[0]["current"].skytext;
        vm.temperature = data[0]["current"].temperature;
      });

      vm.match = function() {
        var valid = 
          vm.formProfile.state &&
          vm.formProfile.age &&
          vm.formProfile.gender;
        if(valid) {
          vm.profileEval = [];
          
          for(i = 0; i < vm.profiles.length; i++) {
            extended.nickname = vm.profiles[i].nickname;
            extended._id = vm.profiles[i]._id;
            console.log(vm.profiles[i].gender);

            // [TODO: NEED TO GET THE FOLLOWING FROM THE WEB SERVER - THE BROWSER HATES THIS CODE]
            // get the distance from the maps web service
            //var origins = vm.formProfile.suburb.replace(" ", "+") + "," + vm.formProfile.state;
            //var destinations = vm.profiles[i].suburb.replace(" ", "+") + "," + vm.profiles[i].state;
            //var url = "https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&" +
            //  "origins=" + origins + "&destinations=" + destinations;
            //$.getJSON(url, function(data) {
            //		console.log(data);
            //	});
            extended.distance = "TBD";  // not supported yet
            
            // evaluate the match
            if(vm.formProfile.state != vm.profiles[i].state)
              extended.match = "Wrong state";
            else if(vm.formProfile.gender == vm.profiles[i].gender)
              extended.match = "Wrong gender";
            else if(Math.abs(vm.formProfile.age - vm.profiles[i].age) > 10)
              extended.match = "Age gap.";
            else
              extended.match = "YES!!!";
            
            // add to the bound list data
            vm.profileEval.push(extended);
          }
        }
        else
          window.alert("Please fill in the state, age and gender fields.");
      }

        vm.clear = function() {
          vm.formProfile = {
            nickname: "",
            age: "",
            interest: "",
            suburb: "",
            state: "",
            gender: "Male",
              _id: ""
          };
        }

        //This function will handle both of ADD and EDIT operation after checking the current
        //existing ID
        vm.submit = function() {
            //Split between Add or Edit operation
            //Add new profile

            if(!vm.formProfile._id) {
                //Check "Male" radio button for default
                if(vm.formProfile.gender == null){
                    vm.formProfile.gender = "Male";
                }

                var newProfile = {
                  nickname: vm.formProfile.nickname,
                  age: vm.formProfile.age,
                  suburb: vm.formProfile.suburb,
                  state: vm.formProfile.state,
                  interest: vm.formProfile.interest,
                  gender: vm.formProfile.gender
                };
                //Local view update: push the new item into the local data first
                vm.profiles.push(newProfile);

                console.log("NEW profile is: ");
                console.log(newProfile);

                //Database call: then call http.post to add into database
                $http.post('/api/profile/', newProfile).then(function(res) {
                    vm.profiles[vm.profiles.length - 1]._id = res.data.profile._id;
                },

                function(res) {
                    //If fail to update, roll back
                    vm.profiles.pop();
                });
            }
            else {
                //Edit existing profile
                //Backup before executing the operation
                var backup = vm.profiles;

                //Local view update: update the current local data with the new updated item
                vm.profiles = vm.profiles.map(function(profile) {
                    if(profile._id === vm.formProfile._id) {
                        return vm.formProfile;
                    }
                    return profile;
                });

                //Database call: call http.put to update into database
                $http.put('/api/profile/' + vm.formProfile._id, {
                  nickname: vm.formProfile.nickname,
                  age: vm.formProfile.age,
                  suburb: vm.formProfile.suburb,
                  state: vm.formProfile.state,
                  interest: vm.formProfile.interest,
                  gender: vm.formProfile.gender
                }).then(function(res) { },
                function(res) {
                  vm.profiles = backup;
                });
            }

            //Clear the form after finishing operation
            //vm.clear();

            vm.isEdit = false;
        }

        //This function to delete the item in the database
        vm.delete = function(index) {
            //Backup before executing the operation
            var backup = vm.profiles;
            var deleteId = vm.profiles[index]._id;
            vm.profiles = vm.profiles.filter(function(profile, profileIndex) {
                return index !== profileIndex;
            });
            $http.delete('/api/profile/'+ deleteId).then(function(res) {
            }, function(res) {
                //If fail to update, roll back
                vm.profiles = backup;
            });
        }

        //This function is used to move the chosen item data into the form
        vm.edit = function(index) {
            vm.isEdit = true;
            editProfile = vm.profiles[index];
            vm.formProfile = {
                nickname: vm.formProfile.nickname,
                age: vm.formProfile.age,
				suburb: vm.formProfile.suburb,
				state: vm.formProfile.state,
                interest: vm.formProfile.interest,
				gender: vm.formProfile.gender,
                _id: editProfile._id
            }
        }

        vm.close = function() {
          vm.isEdit = false;
        }
    }]);

angular.module('aipdatingApp')
  .controller('LoginCtrl', ["$location", "authentication", function($location, authentication) {
    var vm = this;
    vm.formLogin = {};
/*
    vm.onSubmit = function () {
      console.log("Started login process...");
      authentication.login(vm.formLogin).error(function (err) {
        alert(err);
      }).then(function() {
        console.log("login success!")
        $location.path("profile");
      })
    }
*/
vm.login = function () {
  console.log("Started login process...");
  authentication.login(vm.formLogin).error(function (err) {
    alert(err);
  }).then(function() {
    console.log("login success! yay");
    console.log("user is just logged in: " + authentication.currentUser().name);
    $location.path('profile');
  })
}
  }]);

angular.module('aipdatingApp').controller('logoutCtrl', ["$location", "authentication", function($location,authentication) {
  console.log("Logging out user");
  authentication.logout();
  $location.path('profile');
}]);

angular.module('aipdatingApp')
  .controller('RegisterCtrl', ["$location", "authentication", function($location, authentication) {
    var vm = this;
    vm.registrationForm = {};

    vm.submit = function() {
      console.log("Register is calling ");

      authentication.register(vm.registrationForm).error(function (err) {
        alert(err);
      }).then(function() {
        console.log("registration success");
        console.log("New registered user is: " + authentication.currentUser().name);
        $location.path('register-success');
      });

      console.log("After, Register is calling " + authentication.getToken());
    }
  }]);

angular.module('aipdatingApp').service('authentication', ["$http", "$window", "$timeout", function($http, $window, $timeout) {

  var user = null;

  function initState() {
    var token = getToken();
    user = null;
    if(token) {
      console.log("token is not null");
      var payload = token.split('.')[1];
      payload = $window.atob(payload);
      payload = JSON.parse(payload);

      if (payload.exp > Date.now() / 1000) {
        user = {
          _id: payload._id,
          email: payload.email,
          name: payload.name,
          role: payload.role
        };
        console.log("you are currently logged in");
      };
    };

  };

  initState();

  function currentUser() {
    //console.log("currentUser email: " + user.email);
    return user;
  };

  function getToken() {
    return $window.localStorage['token'];
  }

  function loggedIn(loggedInUser,token) {
    $window.localStorage['token'] = token;
    user = {
      _id: loggedInUser._id,
      email: loggedInUser.email,
      name: loggedInUser.name,
      role: loggedInUser.role
    };
    initState();
  }

  function login(candidateUser) {
    return $http.post('/auth/login',candidateUser).success(function(res) {
      /*
      console.log(res.user);
      user = {
        _id: res.user._id,
        email: res.user.email,
        name: res.user.name,
        role: res.user.role
      };
      console.log("new user : " + user.email);
      */
      loggedIn(res.user, res.token);
    })
  }

  function register(user) {
    console.log("calling register");
    return $http.post('/auth/register',user).success(function(res) {
      console.log("register success");
      console.log("token is: " + res.token);
      loggedIn(res.user, res.token);
    })
  }

  function logout() {
    console.log("logging outttttttttt user");
    $window.localStorage['token'] = "";
    initState();
  }

  return {
    currentUser: currentUser,
    getToken: getToken,
    login: login,
    register: register,
    logout: logout,
  };

}]);

//# sourceMappingURL=app.min.js.map
